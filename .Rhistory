# 顯示到第一層
str(listExample, max.level=1)
listExample[c(1,2)]
str(listExample[c(2,1)], max.level= 1)
str(tainanSportsMap, max.level=1)
str(listExample[c(1,2)], max.level= 1)
# 有多少名字可選：
names(listExample)
str(tainanSportsMap[c(1,382,1076)], max.level=1)
listExample[c("student","學期")]
listExample[c("學期")]
listExample[c("學期")]
listExample[c("student","學期")]
listExample[c("學期","student")]
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("學期")]
listExample[c("student","學期")]
listExample[c("學期","student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
str(listExample[c(T,T)]) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
str(listExample)
str(listExample)
str(listExample[c(F,T)]) # 不要，要
str(listExample)
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
str(listExample[c(6)])
str(listExample)
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
names(taipeiNightMarets)
names(taipeiNightMarkets)
print(selectedMarkets)
c(T,F,
F,F,
T,F,
F,F,
F,T,
F,F,
F,T) -> selectedMarkets
taipeiNightMarkets[selectedMarkets]
names(taipeiNightMarkets)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
print(selectedMarkets)
selectedMarkets <- rep(F,14) #repeat
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE #<- 取代的意思
print(selectedMarkets)
str(taipeiNightMarkets[selectedMarkets],
max.level = 1)
str(listExample, max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get2 <- listExample["學期"]
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
# two_times_chicago
library(lubridate)
two_times_chicago <-c(
with_tz(taipeTime, tzone="American/chicago"),
with_tz(osloTime, tzone="American/chicago")
)
install.library(c(lubridate))
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
# two_times
library(lubridate)
two_times <- c(
ymd_hms("2019-04-12 12:55:30",tz="Asia/Taipei"),
dmy_hms("18.11.2018 15:33:02",tz="Europe/Oslo")
)
two_times
# two_times_chicago
library(lubridate)
two_times_chicago <-c(
with_tz(taipeTime, tzone="American/chicago"),
with_tz(osloTime, tzone="American/chicago")
)
# two_times_chicago
library(lubridate)
two_times_chicago <-c(
with_tz(taipeiTime, tzone="American/chicago"),
with_tz(osloTime, tzone="American/chicago")
)
taipei_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
taipei_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
# two_times
library(lubridate)
two_times <- c(
ymd_hms("2019-04-12 12:55:30",tz="Asia/Taipei"),
dmy_hms("18.11.2018 15:33:02",tz="Europe/Oslo")
)
two_times
# two_times_chicago
library(lubridate)
two_times_chicago <-c(
with_tz(taipeiTime, tzone="American/chicago"),
with_tz(osloTime, tzone="American/chicago")
)
taipei_time <- "西元2019年4月12日 12點55分30秒"
# two_times_chicago
library(lubridate)
two_times_chicago <-c(
with_tz(taipeiTime, tzone="American/chicago"),
with_tz(osloTime, tzone="American/chicago")
)
# course
course<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=num("3"),
time_place=list(list(
weeday= c("星期三"),
time_slots=c(7,8,9),
classroom=c("商2F05"))
)
)
)
# course
course<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=numeric("3"),
time_place=list(list(
weeday= c("星期三"),
time_slots=c(7,8,9),
classroom=c("商2F05"))
)
)
)
# course
course<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=numeric("3"),
time_place=list(list(
weeday= c("星期三"),
time_slots=c(7,8,9),
classroom=c("商2F05"))
)
)
)
str(course)
# two_times_chicago
two_times_chicago <- with_tz_two_times, tzone="American/chicago")
# two_times_chicago
two_times_chicago <- with_tz(two_times, tzone="American/chicago")
two_times_chicago
# two_times_chicago
two_times_chicago <- with_tz (two_times, tzone="American/chicago")
# two_times_chicago
two_times_chicago <- with_tz (two_times, tzone="American/chicago")
two_times_chicago
# two_times_chicago
two_times_chicago <- with_tz(two_times, tzone="American/chicago")
two_times_chicago
# course
course<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=c("3"),
time_place=list(list(
weekday= c("星期三"),
time_slots=numeric(7,8,9),
classroom=c("商2F05"))
)
)
)
# course
course<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=c("3"),
time_place=list(list(
weekday= c("星期三"),
time_slots=c(7,8,9),
classroom=c("商2F05"))
)
)
)
str(course)
# courseUpdate
courseUpdate<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=c("3"),
time_place=list(list(
weekday= c("星期三","星期二"),
time_slots=c(c(7,8),5),
classroom=c("商2F05"))
)
)
)
str(courseUpdate)
# courseUpdate
courseUpdate<- list(
approve=TRUE,
course_info=list(
courseame=c("會計學"),
type=c("必"),
credits=c("3"),
time_place=list(list(
weekday= c("星期三","星期二"),
time_slots=c("7,8","5"),
classroom=c("商2F05"))
)
)
)
str(courseUpdate)
# accidents
accidents <- list(time=ymd("2014,1,1"),
bureaus=list("板橋分局" = list(
type=("駕駛人過失-其他"),
casualties=c(1)),
"海山分局"= list(
type =c("駕駛人過失-搶越行人穿越道"),
casualties=c(1)
)
))
)
# accidents
accidents <- list(time=ymd("2014,1,1"),
bureaus=list("板橋分局" = list(
type=("駕駛人過失-其他"),
casualties=c(1)),
"海山分局"= list(
type =c("駕駛人過失-搶越行人穿越道"),
casualties=c(1)
)
))
# accidents
accidents <- list(time=ymd("2014,1,1"),
bureaus=list("板橋分局" = list(
type=("駕駛人過失-其他"),
casualties=c(1)),
"海山分局"= list(
type =c("駕駛人過失-搶越行人穿越道"),
casualties=c(1)
)
))
str(accidents)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
levels_fiveReceipts
# levels_fiveReceipts
levels_fiveReceipts <- levels(fiveReceipts)
levels_fiveReceipts
# storage_fiveReceipts
storage_fiveReceipts <- as.integer(level_fiveReceipts)
# storage_fiveReceipts
storage_fiveReceipts <- as.integer(levels_fiveReceipts)
storage_fiveReceipts
# chr_fiveReceipts
chr_fiveReceipts <- as.character(levels_fiveReceipts)
chr_fiveReceipts
# sum_fiveReceipts
sum_fiveReceipts <- sum(storage_fiveReceipts)
sum_fiveReceipts
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
library(lubridate)
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
`是否完成`=TRUE,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe"))
)
event_list
get1 <- listExample[["學期"]]
# 顯示到第一層
str(listExample, max.level=1)
listExample[["student"]]
# 有多少名字可選：
names(listExample)
listExample[[1]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
#get1 # 學期拿出來，有3個元素的list
str(listExample, max.level = 3)
str(get1, max.level = 1)
#get1 # 學期拿出來，有3個元素的list
str(listExample, max.level = 3)
get2 <- listExample["學期"]  # listExample 只留下 學期元素，是個只有一個元素的list
str(get2, max.level = 1)
get2 <- listExample["學期"]  # listExample 只留下 學期元素，是個只有一個元素的list
str(get2, max.level = 1)
str(get2, max.level = 2)
str(listExample, max.level = 3)
str(get1, max.level = 1)
str(get2, max.level = 2)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(1,4)]; select1
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學"
teacher="Alice"
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
str(listExample)
#712行 only 2 element
listExample[[1]]
listExample[[2]]
get1 <- listExample[["學期"]] #拿出來
get2 <- listExample["學期"] #只留下
str(get1)
str(get2)
str(get1_layer)
get1$`108-1` -> get_layer1 #get_layer1
str(get1_layer1)
str(get1)
str(get2)
get1 <- listExample[["學期"]] #拿出來
get1 <- listExample$`學期` #拿出來 (與723同意義)
get2 <- listExample["學期"] #只留下
#712行 only 2 element
listExample[[1]]
listExample[[2]]
get1$`108-1` -> get_layer1 #get_layer1
str(get1_layer1)
get1 <- listExample[["學期"]] #拿出來
get1 <- listExample$`學期` #拿出來 (與723同意義)
get2 <- listExample["學期"] #只留下
str(get1)
str(get2)
get1$`108-1` -> get_layer1 #get_layer1
str(get1_layer1)
str(get1_layer1)
get1 $`108-1` -> get1_layer1 #get1_layer1
str(get1_layer1)
str(get1)
str(get1_layer2)
get1_layer1[[1]] -> get1_layer2 #layer_2
str(get1_layer2)
get1 <- listExample[["學期"]] #拿出來
get1 $`108-1` -> get1_layer1 #get1_layer1
get1_layer1[[1]] -> get1_layer2 #layer_2
get1_layer2$teacher
listExample[["學期"]] `108-1`[[1]]$teacher #與752+~755同
get1 <- listExample[["學期"]] #拿出來
get1 $`108-1` -> get1_layer1 #get1_layer1
get1_layer1[[1]] -> get1_layer2 #layer_2
get1_layer2$teacher
listExample[["學期"]] $`108-1`[[1]]$teacher #與752+~755同
listExample["學期"][[1]][[108-1]][[1$teacher]]
get2 <- listExample["學期"]
get2_layer1 <- get2[[1]] # get2$`學期`,get2[["學期"]]
get2_layer2 <- get2_layer1[["108-1"]]
get2_layer3 <- get2_layer2[[1]]
get2_layer3$teacher
listExample["學期"][[1]][[108-1]][[1$teacher]]
listExample["學期"][[1]][['108-1']][[1]]$teacher
listExample["學期"][["學期"]][['108-1']][[1]]$teacher
vector1 <- c(a=1, b=3, c=4)
vector1[["a"]]
vector1[c("a","c")]
vector1$a
vector1[["a"]]
vector1[c("a","c")]
vector1$a
vector1$a
list1$a
list1 <- list(a=1, b=3, c=4)
list1[["a"]]
today <- list(
list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
str(today)
today[[1]][[2]]
today[[1]][[2]]
str(today)
today[[1]]$highesttemp
today[[1]]$highest_temp
today <- list(
list("台北市",
highest_temp=c(highest_temp = 25),
lowest_temp=c(lowest_temp = 18)),
list("新北市",
highest_temp=c(highest_temp = 24),
lowest_temp=c(lowest_temp = 15)))
str(today)
today[[1]]$highest_temp
tomorrow <- list(
list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
weather <- list(today,tomorrow)
print(weather)
library('googlesheets4')
library('dplyr')
library('lubridate')
library(reader)
install.packages("reader")
library(reader)
exDataPost80s <- read_csv("https://www.dropbox.com/s/rc6t40gsxduysz6/exDataPost80s.csv?dl=1")
my_108_total_credits <- 15
_108_total_credits <- 15
my_108_total_credits <- 15
_108_total_credits <- 15
108_total_credits <- 15
_my_108_total_credits <- 15
.108.total_credits <- 15 # 隱藏變數
my.108.total_credits <- 15
.my.108.total_credits <- 15
我的108學年總學分數 <- 15
`我的108學年總學分數` <- 15 # 特殊名稱處理，`不是名稱的一部份
`.108.total_credits` <- 15
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum4 <- c() # 空向量
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
library(googlesheets4)
`出席狀況表單網址` <-
"https://docs.google.com/spreadsheets/d/1oB-5hj1pO5g8FMpZbA7RgIG8NvCRx6WvLPwvleCEV4Q/edit#gid=987577191"
# 缺乏定義值
ss <- as_sheets_id(`出席狀況表單網址`)
homework_sheet <- sheets_read(ss,sheet=1)
